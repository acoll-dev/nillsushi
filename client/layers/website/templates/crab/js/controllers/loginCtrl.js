(function() {
  'use strict';
  angular.module('mainApp').controller('loginCtrl', ["$rootScope", "$scope", "$cookies", "$grRestful", "$grAlert", function($rootScope, $scope, $cookies, $grRestful, $grAlert) {
    var alert;
    $rootScope.gr.title = {
      icon: 'fa fa-fw fa-lock',
      text: 'Acesso restrito'
    };
    alert = $grAlert["new"]();
    return $scope.formSettings = {
      data: {},
      schema: [
        {
          property: 'user',
          type: 'email',
          label: 'E-mail',
          addons: [
            {
              before: true,
              icon: 'fa fa-fw fa-envelope'
            }
          ],
          attr: {
            required: true
          },
          msgs: {
            required: 'Preencha o usuário',
            email: 'E-mail inválido'
          }
        }, {
          property: 'password',
          type: 'password',
          label: 'Senha',
          addons: [
            {
              before: true,
              icon: 'fa fa-fw fa-lock'
            }
          ],
          attr: {
            required: true,
            ngMinlength: 4,
            ngMaxlength: 16
          },
          msgs: {
            required: 'A senha é obrigatória',
            minlength: 'A senha deve possuir no mínimo 4 caractéres',
            maxlength: 'A senha deve possuir no máximo 16 caractéres'
          }
        }
      ],
      submit: function(data) {
        if ($scope.form.$invalid) {
          return;
        }
        return $grRestful.auth({
          action: 'login',
          post: data
        }).then(function(r) {
          if (r.response) {
            if (!$cookies.griffo_cart_ready) {
              location.href = $rootScope.GRIFFO.curAlias + '/user';
            } else {
              location.href = $rootScope.GRIFFO.curAlias + '/finish';
            }
            delete $cookies.griffo_cart_ready;
          }
          return alert.show(r.status, r.message);
        }, function(error) {
          return alert.show('danger', 'ERROR.FATAL');
        });
      }
    };
  }]);

  angular.module('mainApp').controller('signupCtrl', ["$rootScope", "$scope", "$cookies", "$grRestful", "$grAlert", "$cidadeEstado", "$timeout", function($rootScope, $scope, $cookies, $grRestful, $grAlert, $cidadeEstado, $timeout) {
    var alert;
    alert = $grAlert["new"]();
    $scope.shops = [];
    $grRestful.find({
      module: 'shop',
      action: 'select'
    }).then(function(r) {
      if (r.response) {
        return $scope.shops = r.response;
      }
    });
    $scope.states = [];
    angular.forEach($cidadeEstado.get.estados(), function(e) {
      return $scope.states.push({
        value: e[0],
        label: e[1]
      });
    });
    $scope.formSettings = {
      data: {
        status: true,
        state: 'SP',
        preferredshop: 'Itapeva'
      },
      schema: [
        {
          property: 'fkidshop',
          type: 'select',
          label: 'Loja preferencial',
          list: 'item.value as item.label for item in shops',
          columns: 12,
          attr: {
            required: true
          },
          msgs: {
            required: 'Selecione uma loja preferencial'
          }
        }, {
          property: 'name',
          type: 'text',
          label: 'Nome',
          columns: 12,
          attr: {
            required: true
          },
          msgs: {
            required: 'Preencha o nome'
          }
        }, {
          property: 'phone',
          type: 'phone',
          label: 'Telefone',
          columns: {
            xs: 12,
            sm: 12,
            md: 6
          },
          attr: {
            ngRequired: '!formSettings.data.mobilephone',
            required: true
          },
          msgs: {
            required: 'Informe o Telefone',
            mask: 'O telefone é inválido'
          }
        }, {
          property: 'mobilephone',
          type: 'mobilephone',
          label: 'Celular',
          columns: {
            xs: 12,
            sm: 12,
            md: 6
          },
          attr: {
            ngRequired: '!formSettings.data.phone',
            required: true
          },
          msgs: {
            required: 'Informe o Celular',
            mask: 'O celular é inválido'
          }
        }, {
          property: 'email',
          type: 'email',
          label: 'E-mail',
          placeholder: 'exemplo@exemplo.com',
          columns: {
            xs: 12,
            sm: 12,
            md: 6
          },
          attr: {
            required: true
          },
          msgs: {
            required: 'Informe o e-mail',
            email: 'O formato do e-mail é inválido!'
          }
        }, {
          property: 'password',
          type: 'password',
          label: 'Senha',
          columns: {
            xs: 12,
            sm: 12,
            md: 6
          },
          attr: {
            required: true,
            ngMinlength: 4,
            ngMaxlength: 16
          },
          msgs: {
            required: 'A senha é obrigatória',
            minlength: 'A senha deve possuir no mínimo 4 caractéres',
            maxlength: 'A senha deve possuir no máximo 16 caractéres',
            pattern: 'A senha é inválida'
          }
        }, {
          property: 'address',
          type: 'text',
          label: 'Endereço',
          columns: 8,
          attr: {
            required: true
          },
          msgs: {
            required: 'Preencha o endereço'
          }
        }, {
          property: 'number',
          type: 'text',
          label: 'Número',
          number: true,
          columns: 4,
          attr: {
            required: true
          },
          msgs: {
            required: 'Preencha o número'
          }
        }, {
          property: 'complement',
          type: 'text',
          label: 'Complemento',
          columns: 6
        }, {
          property: 'district',
          type: 'text',
          label: 'Bairro',
          columns: 6,
          attr: {
            required: true
          },
          msgs: {
            required: 'Preencha o bairro'
          }
        }, {
          property: 'state',
          type: 'select',
          label: 'Estado',
          columns: 6,
          list: 'item.value as item.label for item in states',
          attr: {
            required: true
          },
          msgs: {
            required: 'Selecione um estado'
          }
        }, {
          property: 'city',
          type: 'select',
          label: 'Cidade',
          columns: 6,
          list: 'item.value as item.label for item in cities',
          attr: {
            required: true
          },
          msgs: {
            required: 'Selecione uma cidade'
          }
        }
      ],
      submit: function(data) {
        if ($scope.form.$invalid) {
          return;
        }
        return $grRestful.create({
          module: 'client',
          action: 'insert',
          post: data
        }).then(function(r) {
          if (r.response) {
            return $grRestful.auth({
              action: 'login',
              post: {
                user: data.email,
                password: data.password
              }
            }).then(function(r) {
              if (r.response) {
                alert.show('success', 'Cadastro realizado com sucesso, você está sendo redirecionado...');
                if (!$cookies.griffo_cart_ready) {
                  location.href = $rootScope.GRIFFO.curAlias + '/user';
                } else {
                  location.href = $rootScope.GRIFFO.curAlias + '/finish';
                }
                return delete $cookies.griffo_cart_ready;
              } else {
                return alert.show(r.status, r.message);
              }
            });
          }
        }, function(error) {
          return alert.show('danger', 'ERROR.FATAL');
        });
      }
    };
    return $scope.$watch('formSettings.data.state', function(e) {
      if (e) {
        if ($scope.formSettings.data.state) {
          $scope.cities = [];
          angular.forEach($cidadeEstado.get.cidades($scope.formSettings.data.state), function(c) {
            return $scope.cities.push({
              value: c,
              label: c
            });
          });
        } else {
          $scope.cities = [];
        }
        if ($scope.formSettings.data.state === 'SP') {
          return $scope.formSettings.data.city = 'Itapeva';
        } else {
          return $scope.formSettings.data.city = void 0;
        }
      } else {
        return $scope.formSettings.data.city = void 0;
      }
    });
  }]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,