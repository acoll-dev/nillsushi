(function() {
  'use strict';
  angular.module('mainApp').directive('map', ["$rootScope", "$templateCache", "$window", function($rootScope, $templateCache, $window) {
    return {
      restrict: 'E',
      template: function() {
        return $templateCache.get('griffo/map.html');
      },
      replace: true,
      link: function($scope, $element, $attrs) {
        $scope.map = {
          refresh: false,
          zoom: 15,
          coords: {},
          marker: {},
          control: function() {},
          options: {
            draggable: false,
            scrollwheel: false,
            mapTypeControl: false,
            streetViewControl: false,
            zoomControl: true,
            panControl: true
          }
        };
        $attrs.$observe('config', function(config) {
          var coords;
          config = angular.isString(config) ? JSON.parse(config) : config;
          if (config.coords) {
            coords = {
              latitude: Number(config.coords.split(',')[0].trim()),
              longitude: Number(config.coords.split(',')[1].trim())
            };
            $scope.map.coords = angular.copy(coords);
            $scope.map.marker = angular.copy(coords);
          }
          if (config.zoom) {
            return $scope.map.zoom = Number(config.zoom);
          }
        });
        return angular.element($window).on('resize', function() {
          if ($scope.map.control.refresh) {
            return $scope.map.control.refresh($scope.map.marker);
          }
        });
      }
    };
  }]).run(["$templateCache", function($templateCache) {
    return $templateCache.put('griffo/map.html', '<div class="map">\n    <ui-gmap-google-map center="map.coords" zoom="map.zoom" control="map.control" options="map.options">\n        <ui-gmap-marker coords="map.marker" idkey="1"></ui-gmap-marker>\n    </ui-gmap-google-map>\n</div>');
  }]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9sYXllcnMvd2Vic2l0ZS90ZW1wbGF0ZXMvbW9kZWxvMDMvY29mZmVlL2RpcmVjdGl2ZXMvbWFwRHJ0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBO0VBQ0EsT0FBTyxDQUFDLE1BQVIsQ0FBZSxTQUFmLENBQ0ksQ0FBQyxTQURMLENBQ2UsS0FEZixFQUNzQixTQUFDLFVBQUQsRUFBYSxjQUFiLEVBQTZCLE9BQTdCO1dBQ2Q7TUFDSSxRQUFBLEVBQVUsR0FEZDtNQUVJLFFBQUEsRUFBVSxTQUFBO2VBQ04sY0FBYyxDQUFDLEdBQWYsQ0FBbUIsaUJBQW5CO01BRE0sQ0FGZDtNQUlJLE9BQUEsRUFBUyxJQUpiO01BS0ksSUFBQSxFQUFNLFNBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsTUFBbkI7UUFDRixNQUFNLENBQUMsR0FBUCxHQUNJO1VBQUEsT0FBQSxFQUFTLEtBQVQ7VUFDQSxJQUFBLEVBQU0sRUFETjtVQUVBLE1BQUEsRUFBUSxFQUZSO1VBR0EsTUFBQSxFQUFRLEVBSFI7VUFJQSxPQUFBLEVBQVMsU0FBQSxHQUFBLENBSlQ7VUFLQSxPQUFBLEVBQ0k7WUFBQSxTQUFBLEVBQVcsS0FBWDtZQUNBLFdBQUEsRUFBYSxLQURiO1lBRUEsY0FBQSxFQUFnQixLQUZoQjtZQUdBLGlCQUFBLEVBQW1CLEtBSG5CO1lBSUEsV0FBQSxFQUFhLElBSmI7WUFLQSxVQUFBLEVBQVksSUFMWjtXQU5KOztRQVlKLE1BQU0sQ0FBQyxRQUFQLENBQWdCLFFBQWhCLEVBQTBCLFNBQUMsTUFBRDtBQUN0QixjQUFBO1VBQUEsTUFBQSxHQUFZLE9BQU8sQ0FBQyxRQUFSLENBQWlCLE1BQWpCLENBQUgsR0FBaUMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxNQUFYLENBQWpDLEdBQXlEO1VBQ2xFLElBQUcsTUFBTSxDQUFDLE1BQVY7WUFDSSxNQUFBLEdBQ0k7Y0FBQSxRQUFBLEVBQVUsTUFBQSxDQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBZCxDQUFvQixHQUFwQixDQUF5QixDQUFBLENBQUEsQ0FBRSxDQUFDLElBQTVCLENBQUEsQ0FBUCxDQUFWO2NBQ0EsU0FBQSxFQUFXLE1BQUEsQ0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQWQsQ0FBb0IsR0FBcEIsQ0FBeUIsQ0FBQSxDQUFBLENBQUUsQ0FBQyxJQUE1QixDQUFBLENBQVAsQ0FEWDs7WUFFSixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQVgsR0FBb0IsT0FBTyxDQUFDLElBQVIsQ0FBYSxNQUFiO1lBQ3BCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBWCxHQUFvQixPQUFPLENBQUMsSUFBUixDQUFhLE1BQWIsRUFMeEI7O1VBTUEsSUFBRyxNQUFNLENBQUMsSUFBVjttQkFDSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQVgsR0FBa0IsTUFBQSxDQUFPLE1BQU0sQ0FBQyxJQUFkLEVBRHRCOztRQVJzQixDQUExQjtlQVVBLE9BQU8sQ0FBQyxPQUFSLENBQWdCLE9BQWhCLENBQXdCLENBQUMsRUFBekIsQ0FBNEIsUUFBNUIsRUFBc0MsU0FBQTtVQUNsQyxJQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQXRCO21CQUNJLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQW5CLENBQTJCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBdEMsRUFESjs7UUFEa0MsQ0FBdEM7TUF4QkUsQ0FMVjs7RUFEYyxDQUR0QixDQXFDSSxDQUFDLEdBckNMLENBcUNTLFNBQUMsY0FBRDtXQUVELGNBQWMsQ0FBQyxHQUFmLENBQW1CLGlCQUFuQixFQUFzQyx5T0FBdEM7RUFGQyxDQXJDVDtBQURBIiwiZmlsZSI6ImNsaWVudC9sYXllcnMvd2Vic2l0ZS90ZW1wbGF0ZXMvbW9kZWxvMDMvanMvZGlyZWN0aXZlcy9tYXBEcnQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbmFuZ3VsYXIubW9kdWxlICdtYWluQXBwJ1xuICAgIC5kaXJlY3RpdmUgJ21hcCcsICgkcm9vdFNjb3BlLCAkdGVtcGxhdGVDYWNoZSwgJHdpbmRvdykgLT5cbiAgICAgICAge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJ1xuICAgICAgICAgICAgdGVtcGxhdGU6IC0+XG4gICAgICAgICAgICAgICAgJHRlbXBsYXRlQ2FjaGUuZ2V0ICdncmlmZm8vbWFwLmh0bWwnXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlXG4gICAgICAgICAgICBsaW5rOiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzKSAtPlxuICAgICAgICAgICAgICAgICRzY29wZS5tYXAgPVxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB6b29tOiAxNVxuICAgICAgICAgICAgICAgICAgICBjb29yZHM6IHt9XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcjoge31cbiAgICAgICAgICAgICAgICAgICAgY29udHJvbDogLT5cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbHdoZWVsOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlZXRWaWV3Q29udHJvbDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb21Db250cm9sOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICBwYW5Db250cm9sOiB0cnVlXG4gICAgICAgICAgICAgICAgJGF0dHJzLiRvYnNlcnZlICdjb25maWcnLCAoY29uZmlnKSAtPlxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBpZiBhbmd1bGFyLmlzU3RyaW5nKGNvbmZpZykgdGhlbiBKU09OLnBhcnNlKGNvbmZpZykgZWxzZSBjb25maWdcbiAgICAgICAgICAgICAgICAgICAgaWYgY29uZmlnLmNvb3Jkc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogTnVtYmVyKGNvbmZpZy5jb29yZHMuc3BsaXQoJywnKVswXS50cmltKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBOdW1iZXIoY29uZmlnLmNvb3Jkcy5zcGxpdCgnLCcpWzFdLnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY29vcmRzID0gYW5ndWxhci5jb3B5KGNvb3JkcylcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAubWFya2VyID0gYW5ndWxhci5jb3B5KGNvb3JkcylcbiAgICAgICAgICAgICAgICAgICAgaWYgY29uZmlnLnpvb21cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAuem9vbSA9IE51bWJlcihjb25maWcuem9vbSlcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24gJ3Jlc2l6ZScsIC0+XG4gICAgICAgICAgICAgICAgICAgIGlmICRzY29wZS5tYXAuY29udHJvbC5yZWZyZXNoXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLmNvbnRyb2wucmVmcmVzaCAkc2NvcGUubWFwLm1hcmtlclxuXG4gICAgICAgIH1cblxuICAgIC5ydW4gKCR0ZW1wbGF0ZUNhY2hlKSAtPlxuXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCAnZ3JpZmZvL21hcC5odG1sJywgJycnXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFwXCI+XG4gICAgICAgICAgICAgICAgPHVpLWdtYXAtZ29vZ2xlLW1hcCBjZW50ZXI9XCJtYXAuY29vcmRzXCIgem9vbT1cIm1hcC56b29tXCIgY29udHJvbD1cIm1hcC5jb250cm9sXCIgb3B0aW9ucz1cIm1hcC5vcHRpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDx1aS1nbWFwLW1hcmtlciBjb29yZHM9XCJtYXAubWFya2VyXCIgaWRrZXk9XCIxXCI+PC91aS1nbWFwLW1hcmtlcj5cbiAgICAgICAgICAgICAgICA8L3VpLWdtYXAtZ29vZ2xlLW1hcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAnJydcbiJdfQ==