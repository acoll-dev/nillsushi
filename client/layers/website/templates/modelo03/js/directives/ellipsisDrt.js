(function() {
  'use strict';
  angular.module('mainApp').directive('ellipsis', ["$rootScope", "$compile", "$window", "$timeout", function($rootScope, $compile, $window, $timeout) {
    return {
      restrict: 'A',
      scope: {
        rows: '=',
        suffix: '=',
        ngBind: '='
      },
      link: function($scope, $element, $attrs) {
        var $el, ajustText, ajustTimeout, defaults, ellipsis, getRows, newContent, noUnit, setHeight;
        newContent = '';
        ajustTimeout = $timeout(function() {});
        defaults = {
          rows: {
            xs: 0,
            sm: 0,
            md: 0,
            lg: 0
          },
          suffix: '...'
        };
        $el = void 0;
        ellipsis = function() {
          if (!$el) {
            $element.html('<p id="ellipsis-container" style="margin: 0; padding: 0;"></p>');
            $el = $element.children('#ellipsis-container').html(angular.copy($scope.ngBind));
          }
          if ($scope.limit && $scope.ngBind && $rootScope.GRIFFO.viewPort) {
            newContent = angular.copy($scope.ngBind).split(' ');
            $el.html(newContent.join(' '));
            setHeight();
            if (getRows() && getRows() > $scope.limit[$rootScope.GRIFFO.viewPort.bs] && $scope.limit[$rootScope.GRIFFO.viewPort.bs] !== 0) {
              $scope.ajusting = true;
              ajustText();
            }
          }
        };
        ajustText = function() {
          $timeout.cancel(ajustTimeout);
          return ajustTimeout = $timeout(function() {
            newContent = newContent.slice(0, -1);
            $el.html(newContent.join(' ') + ($scope.suffix ? $scope.suffix : defaults.suffix));
            if (getRows() > $scope.limit[$rootScope.GRIFFO.viewPort.bs]) {
              return ajustText();
            } else {
              $scope.ajusting = false;
              return setHeight();
            }
          });
        };
        getRows = function() {
          if (noUnit($el.css('height'))) {
            return parseInt(noUnit($el.css('height')) / parseInt(noUnit($el.css('line-height'))));
          } else {
            return false;
          }
        };
        noUnit = function(str) {
          return Number(str.split('px')[0].split('%')[0]);
        };
        setHeight = function() {
          if ($scope.limit[$rootScope.GRIFFO.viewPort.bs] !== 0) {
            $element.css('height', $scope.limit[$rootScope.GRIFFO.viewPort.bs] * noUnit($el.css('line-height')) + noUnit($element.css('padding-top')) + noUnit($element.css('padding-bottom'))).css('overflow', 'hidden');
          } else {
            $element.css('height', '').css('overflow', 'visible');
          }
        };
        $scope.limit = defaults.rows;
        $scope.$watch('ngBind', ellipsis);
        $scope.$watch('rows', function(rows) {
          var newRows;
          if (rows) {
            if (angular.isObject(rows)) {
              if (!$scope.limit) {
                $scope.limit = {};
              }
              angular.forEach(defaults.rows, function(r, id) {
                if (angular.isDefined(rows[id])) {
                  $scope.limit[id] = rows[id];
                }
              });
            } else {
              newRows = {};
              angular.forEach(defaults.rows, function(r, id) {
                newRows[id] = rows;
              });
              $scope.limit = newRows;
            }
            return ellipsis();
          }
        });
        $scope.$watch('suffix', ellipsis);
        return $rootScope.$watch('GRIFFO.viewPort.width', function() {
          return $timeout(ellipsis, 100);
        });
      }
    };
  }]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,