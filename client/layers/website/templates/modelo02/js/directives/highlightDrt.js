(function() {
  'use strict';
  angular.module('mainApp').directive('highlightCarousel', ["$rootScope", "$templateCache", "$window", "$timeout", "$compile", "$grRestful", function($rootScope, $templateCache, $window, $timeout, $compile, $grRestful) {
    return {
      restrict: 'E',
      scope: {
        params: '='
      },
      template: '<div data-ng-show="items.length > 0" data-ng-class="params.containerClass"></div>',
      replace: true,
      link: function($scope, $element, $attrs) {
        $scope.$watch('params', function(params) {
          var tmpl;
          if (params) {
            $scope.items = [];
            $scope.filtered = [];
            if (params.model.image && params.model.image.preload) {
              $scope.ready = false;
              $scope.imagesLoadedEvent = {
                always: function(instance) {
                  return $timeout(function() {
                    angular.element($window).trigger('resize');
                    return $scope.ready = true;
                  });
                }
              };
            } else {
              $scope.ready = true;
            }
            $grRestful.find({
              module: params.module,
              action: $rootScope.GRIFFO.filter.category ? 'category' : 'get',
              id: $rootScope.GRIFFO.filter.category ? $rootScope.GRIFFO.filter.category.idcategory : '',
              onelevel: !$rootScope.GRIFFO.filter.category ? false : true,
              params: !$rootScope.GRIFFO.filter.category && params.highlightsOnly ? 'highlight=1' : ''
            }).then(function(r) {
              if (r.response) {
                if (params.sort) {
                  if (params.sort.type && params.sort.type !== 'string') {
                    r.response.sort(function(a, b) {
                      var _a, _b, _return;
                      _return = void 0;
                      _a = void 0;
                      _b = void 0;
                      if (params.sort.type === 'date') {
                        _a = new Date(a[params.sort.by]);
                        _b = new Date(b[params.sort.by]);
                      } else if (params.sort.type === 'number') {
                        _a = new Number(a[params.sort.by]);
                        _b = new Number(b[params.sort.by]);
                      }
                      if (params.sort.order === 'asc') {
                        _return = _a - _b;
                      } else if (params.sort.order === 'desc') {
                        _return = _b - _a;
                      }
                      return _return;
                    });
                  } else {
                    if (params.sort.order === 'asc') {
                      r.response.sort();
                    } else if (params.sort.order === 'desc') {
                      r.response.sort().reverse();
                    }
                  }
                }
                $scope.items = r.response;
                return $timeout(function() {
                  return angular.element($window).trigger('resize');
                });
              } else {
                return $scope.items = [];
              }
            });
            tmpl = [];
            angular.forEach(params.model.sort, function(t) {
              if (t) {
                return tmpl.push($templateCache.get('griffo/highlight/' + t + '.html'));
              }
            });
            tmpl = tmpl.join('<div class="clearfix"></div>');
            if (!params.type || params.type === 'carousel') {
              tmpl = $templateCache.get('griffo/highlight/carousel-start.html') + tmpl;
            } else if (params.type === 'pager') {
              tmpl = $templateCache.get('griffo/highlight/pager-start.html') + tmpl;
            }
            if (!params.type || params.type === 'carousel') {
              tmpl += $templateCache.get('griffo/highlight/carousel-end.html');
            } else if (params.type === 'pager') {
              tmpl += $templateCache.get('griffo/highlight/pager-end.html');
            }
            tmpl = angular.element(tmpl);
            $compile(tmpl)($scope);
            return $element.html(tmpl);
          }
        });
        return $scope.GRIFFO = $rootScope.GRIFFO;
      }
    };
  }]).run(["$templateCache", function($templateCache) {
    $templateCache.put('griffo/highlight/pager-start.html', '<div class="title" data-ng-if="params.title">\n    <div class="container">\n        <h1>\n        {{params.title}}\n        </h1>\n    </div>\n</div>\n<div class="highlight-wrapper" data-ng-class="params.wrapperClass">\n    <gr-pager src="items" dest="filtered" per-page="params.pager.perPage" data-ng-show="params.pager.position === \'both\' || params.pager.position === \'top\'"></gr-pager>\n        <div class="highlight" data-ng-class="params.model.class" data-ng-repeat="item in filtered" images-loaded="imagesLoadedEvent">\n            <div class="highlight-inner">');
    $templateCache.put('griffo/highlight/pager-end.html', '            </div>\n        </div>\n    <gr-pager src="items" dest="filtered" per-page="params.pager.perPage" data-ng-show="params.pager.position === \'both\' || params.pager.position === \'bottom\'"></gr-pager>\n</div>');
    $templateCache.put('griffo/highlight/carousel-start.html', '<div class="title">\n    <div class="container">\n        <h1 data-ng-if="params.title">\n            {{params.title}}\n            <div class="highlight-controller highlight-controller-top hidden-xs hidden-sm" data-ng-if="params.carousel.controller && params.carousel.controller.position === \'top\' && params.carousel.bs[GRIFFO.viewPort.bs] < items.length">\n                <button class="btn" data-ng-click="carousel.prev()"><i data-ng-class="params.carousel.controller.icon.prev"></i></button>\n                <button class="btn" data-ng-click="carousel.next()"><i data-ng-class="params.carousel.controller.icon.next"></i></button>\n            </div>\n        </h1>\n    </div>\n</div>\n<div class="highlight-wrapper container" data-ng-class="params.wrapperClass">\n    <div class="highlight-controller highlight-controller-top hidden-md hidden-lg" data-ng-if="params.carousel.controller && params.carousel.controller.position === \'top\' && (GRIFFO.viewPort.bs === \'xs\' || GRIFFO.viewPort.bs === \'sm\')">\n        <button class="btn" data-ng-click="carousel.prev()"><i data-ng-class="params.carousel.controller.icon.prev"></i></button>\n        <button class="btn" data-ng-click="carousel.next()"><i data-ng-class="params.carousel.controller.icon.next"></i></button>\n    </div>\n    <gr-carousel class="highlight-carousel" bs="{{params.carousel.bs}}" autoplay="{{$scope.params.carousel.autoplay || \'4000\'}}" images-loaded="imagesLoadedEvent">\n        <gr-carousel-item class="highlight" data-ng-class="params.model.class" data-ng-repeat="item in items">\n            <div class="highlight-inner">');
    $templateCache.put('griffo/highlight/carousel-end.html', '            </div>\n        </gr-carousel-item>\n    </gr-carousel>\n    <div class="highlight-controller highlight-controller-bottom" data-ng-if="params.carousel.controller && params.carousel.controller.position === \'bottom\' && (!params.type || params.type === \'carousel\')">\n        <button class="btn" data-ng-click="carousel.prev()"><i data-ng-class="params.carousel.controller.icon.prev"></i></button>\n        <button class="btn" data-ng-click="carousel.next()"><i data-ng-class="params.carousel.controller.icon.next"></i></button>\n    </div>\n</div>');
    $templateCache.put('griffo/highlight/date.html', '<div class="date" data-ng-class="params.model.date.class">\n    <i data-ng-class="params.model.date.icon" data-ng-if="params.model.date.icon"></i><span data-ng-if="params.model.date.icon"> </span>\n    <span data-ng-if="params.model.date.prefix">{{params.model.date.prefix}}</span>\n        {{item.registrationdate | date:(params.model.date.filter || \'dd/MM/yyyy\')}}\n    <span data-ng-if="params.model.date.suffix">{{params.model.date.suffix}}</span>\n</div>');
    $templateCache.put('griffo/highlight/image.html', '<div class="highlight-image preloader-wrapper" gr-autoscale="params.model.image.scale" data-ng-if="!ready">\n    <div class="preloader">\n        <i class="fa fa-fw fa-refresh fa-2x fa-spin"></i>\n        <a data-ng-href="{{params.url.prefix + (item.url || item.link) + params.url.suffix}}" data-ng-show="ready" data-ng-attr-title="{{item.title || item.name}}" target="{{params.model.link.target}}"></a>\n    </div>\n</div>\n<div class="highlight-image" gr-autoscale="params.model.image.scale" data-ng-show="ready">\n    <a data-ng-href="{{params.url.prefix + (item.url || item.link) + params.url.suffix}}" data-ng-attr-title="{{item.title || item.name}}" target="{{params.model.link.target}}">\n        <img class="img-responsive" data-ng-src="{{GRIFFO.uploadPath + (item.picture || item.image)}}"/>\n    </a>\n</div>');
    $templateCache.put('griffo/highlight/title.html', '<a data-ng-href="{{params.url.prefix + item.url + params.url.suffix}}" data-ng-attr-title="{{item.title || item.name}}" target="{{params.model.link.target}}">\n    <h2 class="highlight-title">{{item.name}}</h2>\n</a>');
    $templateCache.put('griffo/highlight/shortdescription.html', '<p>{{item.shortdescription}}</p>');
    return $templateCache.put('griffo/highlight/link.html', '<a data-ng-href="{{params.url.prefix + item.url + params.url.suffix}}" data-ng-class="params.model.link.class" data-ng-attr-title="{{item.title || item.name}}" target="{{params.model.link.target}}">\n    <i data-ng-class="params.model.link.icon" data-ng-if="params.model.link.icon"></i>\n    <span data-ng-if="params.model.link.icon"> </span>\n    <span data-ng-if="params.model.link.label">{{params.model.link.label}}</span>\n</a>');
  }]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9sYXllcnMvd2Vic2l0ZS90ZW1wbGF0ZXMvbW9kZWxvMDIvY29mZmVlL2RpcmVjdGl2ZXMvaGlnaGxpZ2h0RHJ0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBO0VBQ0EsT0FBTyxDQUFDLE1BQVIsQ0FBZSxTQUFmLENBQ0ksQ0FBQyxTQURMLENBQ2UsbUJBRGYsRUFDb0MsU0FBQyxVQUFELEVBQWEsY0FBYixFQUE2QixPQUE3QixFQUFzQyxRQUF0QyxFQUFnRCxRQUFoRCxFQUEwRCxVQUExRDtXQUM1QjtNQUNJLFFBQUEsRUFBVSxHQURkO01BRUksS0FBQSxFQUFPO1FBQUEsTUFBQSxFQUFRLEdBQVI7T0FGWDtNQUdJLFFBQUEsRUFBVSxtRkFIZDtNQUlJLE9BQUEsRUFBUyxJQUpiO01BS0ksSUFBQSxFQUFNLFNBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsTUFBbkI7UUFDRixNQUFNLENBQUMsTUFBUCxDQUFjLFFBQWQsRUFBd0IsU0FBQyxNQUFEO0FBQ3BCLGNBQUE7VUFBQSxJQUFHLE1BQUg7WUFDSSxNQUFNLENBQUMsS0FBUCxHQUFlO1lBQ2YsTUFBTSxDQUFDLFFBQVAsR0FBa0I7WUFDbEIsSUFBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQWIsSUFBdUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBN0M7Y0FDSSxNQUFNLENBQUMsS0FBUCxHQUFlO2NBQ2YsTUFBTSxDQUFDLGlCQUFQLEdBQTJCO2dCQUFBLE1BQUEsRUFBUSxTQUFDLFFBQUQ7eUJBQy9CLFFBQUEsQ0FBUyxTQUFBO29CQUNMLE9BQU8sQ0FBQyxPQUFSLENBQWdCLE9BQWhCLENBQXdCLENBQUMsT0FBekIsQ0FBaUMsUUFBakM7MkJBQ0EsTUFBTSxDQUFDLEtBQVAsR0FBZTtrQkFGVixDQUFUO2dCQUQrQixDQUFSO2dCQUYvQjthQUFBLE1BQUE7Y0FPSSxNQUFNLENBQUMsS0FBUCxHQUFlLEtBUG5COztZQVFBLFVBQVUsQ0FBQyxJ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LEdBQWYsQ0FBbUIsc0NBQW5CLEVBQTJELDZrREFBM0Q7SUFzQkEsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsb0NBQW5CLEVBQXlELG1qQkFBekQ7SUFXQSxjQUFjLENBQUMsR0FBZixDQUFtQiw0QkFBbkIsRUFBaUQsK2NBQWpEO0lBU0EsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsNkJBQW5CLEVBQWtELG96QkFBbEQ7SUFjQSxjQUFjLENBQUMsR0FBZixDQUFtQiw2QkFBbkIsRUFBa0QsME5BQWxEO0lBTUEsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsd0NBQW5CLEVBQTZELGtDQUE3RDtXQUVBLGNBQWMsQ0FBQyxHQUFmLENBQW1CLDRCQUFuQixFQUFpRCxpYkFBakQ7RUF2RkMsQ0F6RVQ7QUFEQSIsImZpbGUiOiJjbGllbnQvbGF5ZXJzL3dlYnNpdGUvdGVtcGxhdGVzL21vZGVsbzAyL2pzL2RpcmVjdGl2ZXMvaGlnaGxpZ2h0RHJ0LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5hbmd1bGFyLm1vZHVsZSAnbWFpbkFwcCdcbiAgICAuZGlyZWN0aXZlICdoaWdobGlnaHRDYXJvdXNlbCcsICgkcm9vdFNjb3BlLCAkdGVtcGxhdGVDYWNoZSwgJHdpbmRvdywgJHRpbWVvdXQsICRjb21waWxlLCAkZ3JSZXN0ZnVsKSAtPlxuICAgICAgICB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnXG4gICAgICAgICAgICBzY29wZTogcGFyYW1zOiAnPSdcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBkYXRhLW5nLXNob3c9XCJpdGVtcy5sZW5ndGggPiAwXCIgZGF0YS1uZy1jbGFzcz1cInBhcmFtcy5jb250YWluZXJDbGFzc1wiPjwvZGl2PidcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWVcbiAgICAgICAgICAgIGxpbms6ICgkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMpIC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCAncGFyYW1zJywgKHBhcmFtcykgLT5cbiAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1zXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkID0gW11cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBhcmFtcy5tb2RlbC5pbWFnZSBhbmQgcGFyYW1zLm1vZGVsLmltYWdlLnByZWxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVhZHkgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbWFnZXNMb2FkZWRFdmVudCA9IGFsd2F5czogKGluc3RhbmNlKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dCAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLnRyaWdnZXIgJ3Jlc2l6ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWFkeSA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVhZHkgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAkZ3JSZXN0ZnVsLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlOiBwYXJhbXMubW9kdWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBpZiAkcm9vdFNjb3BlLkdSSUZGTy5maWx0ZXIuY2F0ZWdvcnkgdGhlbiAnY2F0ZWdvcnknIGVsc2UgJ2dldCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWYgJHJvb3RTY29wZS5HUklGRk8uZmlsdGVyLmNhdGVnb3J5IHRoZW4gJHJvb3RTY29wZS5HUklGRk8uZmlsdGVyLmNhdGVnb3J5LmlkY2F0ZWdvcnkgZWxzZSAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZWxldmVsOiBpZiAhJHJvb3RTY29wZS5HUklGRk8uZmlsdGVyLmNhdGVnb3J5IHRoZW4gZmFsc2UgZWxzZSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBpZiAhJHJvb3RTY29wZS5HUklGRk8uZmlsdGVyLmNhdGVnb3J5IGFuZCBwYXJhbXMuaGlnaGxpZ2h0c09ubHkgdGhlbiAnaGlnaGxpZ2h0PTEnIGVsc2UgJycpLnRoZW4gKHIpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgci5yZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbXMuc29ydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1zLnNvcnQudHlwZSBhbmQgcGFyYW1zLnNvcnQudHlwZSAhPSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIucmVzcG9uc2Uuc29ydCAoYSwgYikgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JldHVybiA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbXMuc29ydC50eXBlID09ICdkYXRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBuZXcgRGF0ZShhW3BhcmFtcy5zb3J0LmJ5XSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gbmV3IERhdGUoYltwYXJhbXMuc29ydC5ieV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgcGFyYW1zLnNvcnQudHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBuZXcgTnVtYmVyKGFbcGFyYW1zLnNvcnQuYnldKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBuZXcgTnVtYmVyKGJbcGFyYW1zLnNvcnQuYnldKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbXMuc29ydC5vcmRlciA9PSAnYXNjJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JldHVybiA9IF9hIC0gX2JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiBwYXJhbXMuc29ydC5vcmRlciA9PSAnZGVzYydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXR1cm4gPSBfYiAtIF9hXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbXMuc29ydC5vcmRlciA9PSAnYXNjJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnJlc3BvbnNlLnNvcnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgcGFyYW1zLnNvcnQub3JkZXIgPT0gJ2Rlc2MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIucmVzcG9uc2Uuc29ydCgpLnJldmVyc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXRlbXMgPSByLnJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykudHJpZ2dlciAncmVzaXplJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLml0ZW1zID0gW11cbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcGwgPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoIHBhcmFtcy5tb2RlbC5zb3J0LCAodCkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcGwucHVzaCAkdGVtcGxhdGVDYWNoZS5nZXQoJ2dyaWZmby9oaWdobGlnaHQvJyArIHQgKyAnLmh0bWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wbCA9IHRtcGwuam9pbignPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICFwYXJhbXMudHlwZSBvciBwYXJhbXMudHlwZSA9PSAnY2Fyb3VzZWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wbCA9ICR0ZW1wbGF0ZUNhY2hlLmdldCgnZ3JpZmZvL2hpZ2hsaWdodC9jYXJvdXNlbC1zdGFydC5odG1sJykgKyB0bXBsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIHBhcmFtcy50eXBlID09ICdwYWdlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBsID0gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdncmlmZm8vaGlnaGxpZ2h0L3BhZ2VyLXN0YXJ0Lmh0bWwnKSArIHRtcGxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICFwYXJhbXMudHlwZSBvciBwYXJhbXMudHlwZSA9PSAnY2Fyb3VzZWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wbCArPSAkdGVtcGxhdGVDYWNoZS5nZXQoJ2dyaWZmby9oaWdobGlnaHQvY2Fyb3VzZWwtZW5kLmh0bWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiBwYXJhbXMudHlwZSA9PSAncGFnZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wbCArPSAkdGVtcGxhdGVDYWNoZS5nZXQoJ2dyaWZmby9oaWdobGlnaHQvcGFnZXItZW5kLmh0bWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wbCA9IGFuZ3VsYXIuZWxlbWVudCh0bXBsKVxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbXBpbGUodG1wbCkgJHNjb3BlXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5odG1sIHRtcGxcbiAgICAgICAgICAgICAgICAkc2NvcGUuR1JJRkZPID0gJHJvb3RTY29wZS5HUklGRk9cblxuICAgICAgICB9XG4gICAgLnJ1biAoJHRlbXBsYXRlQ2FjaGUpIC0+XG5cbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0ICdncmlmZm8vaGlnaGxpZ2h0L3BhZ2VyLXN0YXJ0Lmh0bWwnLCAnJydcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiIGRhdGEtbmctaWY9XCJwYXJhbXMudGl0bGVcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMT5cbiAgICAgICAgICAgICAgICAgICAge3twYXJhbXMudGl0bGV9fVxuICAgICAgICAgICAgICAgICAgICA8L2gxPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGlnaGxpZ2h0LXdyYXBwZXJcIiBkYXRhLW5nLWNsYXNzPVwicGFyYW1zLndyYXBwZXJDbGFzc1wiPlxuICAgICAgICAgICAgICAgIDxnci1wYWdlciBzcmM9XCJpdGVtc1wiIGRlc3Q9XCJmaWx0ZXJlZFwiIHBlci1wYWdlPVwicGFyYW1zLnBhZ2VyLnBlclBhZ2VcIiBkYXRhLW5nLXNob3c9XCJwYXJhbXMucGFnZXIucG9zaXRpb24gPT09IFxcJ2JvdGhcXCcgfHwgcGFyYW1zLnBhZ2VyLnBvc2l0aW9uID09PSBcXCd0b3BcXCdcIj48L2dyLXBhZ2VyPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGlnaGxpZ2h0XCIgZGF0YS1uZy1jbGFzcz1cInBhcmFtcy5tb2RlbC5jbGFzc1wiIGRhdGEtbmctcmVwZWF0PVwiaXRlbSBpbiBmaWx0ZXJlZFwiIGltYWdlcy1sb2FkZWQ9XCJpbWFnZXNMb2FkZWRFdmVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhpZ2hsaWdodC1pbm5lclwiPlxuICAgICAgICAnJydcblxuICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQgJ2dyaWZmby9oaWdobGlnaHQvcGFnZXItZW5kLmh0bWwnLCAnJydcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Z3ItcGFnZXIgc3JjPVwiaXRlbXNcIiBkZXN0PVwiZmlsdGVyZWRcIiBwZXItcGFnZT1cInBhcmFtcy5wYWdlci5wZXJQYWdlXCIgZGF0YS1uZy1zaG93PVwicGFyYW1zLnBhZ2VyLnBvc2l0aW9uID09PSBcXCdib3RoXFwnIHx8IHBhcmFtcy5wYWdlci5wb3NpdGlvbiA9PT0gXFwnYm90dG9tXFwnXCI+PC9nci1wYWdlcj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAnJydcblxuICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQgJ2dyaWZmby9oaWdobGlnaHQvY2Fyb3VzZWwtc3RhcnQuaHRtbCcsICcnJ1xuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8aDEgZGF0YS1uZy1pZj1cInBhcmFtcy50aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3twYXJhbXMudGl0bGV9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhpZ2hsaWdodC1jb250cm9sbGVyIGhpZ2hsaWdodC1jb250cm9sbGVyLXRvcCBoaWRkZW4teHMgaGlkZGVuLXNtXCIgZGF0YS1uZy1pZj1cInBhcmFtcy5jYXJvdXNlbC5jb250cm9sbGVyICYmIHBhcmFtcy5jYXJvdXNlbC5jb250cm9sbGVyLnBvc2l0aW9uID09PSBcXCd0b3BcXCcgJiYgcGFyYW1zLmNhcm91c2VsLmJzW0dSSUZGTy52aWV3UG9ydC5ic10gPCBpdGVtcy5sZW5ndGhcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuXCIgZGF0YS1uZy1jbGljaz1cImNhcm91c2VsLnByZXYoKVwiPjxpIGRhdGEtbmctY2xhc3M9XCJwYXJhbXMuY2Fyb3VzZWwuY29udHJvbGxlci5pY29uLnByZXZcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIGRhdGEtbmctY2xpY2s9XCJjYXJvdXNlbC5uZXh0KClcIj48aSBkYXRhLW5nLWNsYXNzPVwicGFyYW1zLmNhcm91c2VsLmNvbnRyb2xsZXIuaWNvbi5uZXh0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoaWdobGlnaHQtd3JhcHBlciBjb250YWluZXJcIiBkYXRhLW5nLWNsYXNzPVwicGFyYW1zLndyYXBwZXJDbGFzc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoaWdobGlnaHQtY29udHJvbGxlciBoaWdobGlnaHQtY29udHJvbGxlci10b3AgaGlkZGVuLW1kIGhpZGRlbi1sZ1wiIGRhdGEtbmctaWY9XCJwYXJhbXMuY2Fyb3VzZWwuY29udHJvbGxlciAmJiBwYXJhbXMuY2Fyb3VzZWwuY29udHJvbGxlci5wb3NpdGlvbiA9PT0gXFwndG9wXFwnICYmIChHUklGRk8udmlld1BvcnQuYnMgPT09IFxcJ3hzXFwnIHx8IEdSSUZGTy52aWV3UG9ydC5icyA9PT0gXFwnc21cXCcpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiBkYXRhLW5nLWNsaWNrPVwiY2Fyb3VzZWwucHJldigpXCI+PGkgZGF0YS1uZy1jbGFzcz1cInBhcmFtcy5jYXJvdXNlbC5jb250cm9sbGVyLmljb24ucHJldlwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIGRhdGEtbmctY2xpY2s9XCJjYXJvdXNlbC5uZXh0KClcIj48aSBkYXRhLW5nLWNsYXNzPVwicGFyYW1zLmNhcm91c2VsLmNvbnRyb2xsZXIuaWNvbi5uZXh0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxnci1jYXJvdXNlbCBjbGFzcz1cImhpZ2hsaWdodC1jYXJvdXNlbFwiIGJzPVwie3twYXJhbXMuY2Fyb3VzZWwuYnN9fVwiIGF1dG9wbGF5PVwie3skc2NvcGUucGFyYW1zLmNhcm91c2VsLmF1dG9wbGF5IHx8IFxcJzQwMDBcXCd9fVwiIGltYWdlcy1sb2FkZWQ9XCJpbWFnZXNMb2FkZWRFdmVudFwiPlxuICAgICAgICAgICAgICAgICAgICA8Z3ItY2Fyb3VzZWwtaXRlbSBjbGFzcz1cImhpZ2hsaWdodFwiIGRhdGEtbmctY2xhc3M9XCJwYXJhbXMubW9kZWwuY2xhc3NcIiBkYXRhLW5nLXJlcGVhdD1cIml0ZW0gaW4gaXRlbXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoaWdobGlnaHQtaW5uZXJcIj5cbiAgICAgICAgJycnXG5cbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0ICdncmlmZm8vaGlnaGxpZ2h0L2Nhcm91c2VsLWVuZC5odG1sJywgJycnXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9nci1jYXJvdXNlbC1pdGVtPlxuICAgICAgICAgICAgICAgIDwvZ3ItY2Fyb3VzZWw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhpZ2hsaWdodC1jb250cm9sbGVyIGhpZ2hsaWdodC1jb250cm9sbGVyLWJvdHRvbVwiIGRhdGEtbmctaWY9XCJwYXJhbXMuY2Fyb3VzZWwuY29udHJvbGxlciAmJiBwYXJhbXMuY2Fyb3VzZWwuY29udHJvbGxlci5wb3NpdGlvbiA9PT0gXFwnYm90dG9tXFwnICYmICghcGFyYW1zLnR5cGUgfHwgcGFyYW1zLnR5cGUgPT09IFxcJ2Nhcm91c2VsXFwnKVwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuXCIgZGF0YS1uZy1jbGljaz1cImNhcm91c2VsLnByZXYoKVwiPjxpIGRhdGEtbmctY2xhc3M9XCJwYXJhbXMuY2Fyb3VzZWwuY29udHJvbGxlci5pY29uLnByZXZcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiBkYXRhLW5nLWNsaWNrPVwiY2Fyb3VzZWwubmV4dCgpXCI+PGkgZGF0YS1uZy1jbGFzcz1cInBhcmFtcy5jYXJvdXNlbC5jb250cm9sbGVyLmljb24ubmV4dFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAnJydcblxuICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQgJ2dyaWZmby9oaWdobGlnaHQvZGF0ZS5odG1sJywgJycnXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGF0ZVwiIGRhdGEtbmctY2xhc3M9XCJwYXJhbXMubW9kZWwuZGF0ZS5jbGFzc1wiPlxuICAgICAgICAgICAgICAgIDxpIGRhdGEtbmctY2xhc3M9XCJwYXJhbXMubW9kZWwuZGF0ZS5pY29uXCIgZGF0YS1uZy1pZj1cInBhcmFtcy5tb2RlbC5kYXRlLmljb25cIj48L2k+PHNwYW4gZGF0YS1uZy1pZj1cInBhcmFtcy5tb2RlbC5kYXRlLmljb25cIj4gPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbmctaWY9XCJwYXJhbXMubW9kZWwuZGF0ZS5wcmVmaXhcIj57e3BhcmFtcy5tb2RlbC5kYXRlLnByZWZpeH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICB7e2l0ZW0ucmVnaXN0cmF0aW9uZGF0ZSB8IGRhdGU6KHBhcmFtcy5tb2RlbC5kYXRlLmZpbHRlciB8fCBcXCdkZC9NTS95eXl5XFwnKX19XG4gICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1uZy1pZj1cInBhcmFtcy5tb2RlbC5kYXRlLnN1ZmZpeFwiPnt7cGFyYW1zLm1vZGVsLmRhdGUuc3VmZml4fX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgJycnXG5cbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0ICdncmlmZm8vaGlnaGxpZ2h0L2ltYWdlLmh0bWwnLCAnJydcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoaWdobGlnaHQtaW1hZ2UgcHJlbG9hZGVyLXdyYXBwZXJcIiBnci1hdXRvc2NhbGU9XCJwYXJhbXMubW9kZWwuaW1hZ2Uuc2NhbGVcIiBkYXRhLW5nLWlmPVwiIXJlYWR5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByZWxvYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWZ3IGZhLXJlZnJlc2ggZmEtMnggZmEtc3BpblwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1uZy1ocmVmPVwie3twYXJhbXMudXJsLnByZWZpeCArIChpdGVtLnVybCB8fCBpdGVtLmxpbmspICsgcGFyYW1zLnVybC5zdWZmaXh9fVwiIGRhdGEtbmctc2hvdz1cInJlYWR5XCIgZGF0YS1uZy1hdHRyLXRpdGxlPVwie3tpdGVtLnRpdGxlIHx8IGl0ZW0ubmFtZX19XCIgdGFyZ2V0PVwie3twYXJhbXMubW9kZWwubGluay50YXJnZXR9fVwiPjwvYT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhpZ2hsaWdodC1pbWFnZVwiIGdyLWF1dG9zY2FsZT1cInBhcmFtcy5tb2RlbC5pbWFnZS5zY2FsZVwiIGRhdGEtbmctc2hvdz1cInJlYWR5XCI+XG4gICAgICAgICAgICAgICAgPGEgZGF0YS1uZy1ocmVmPVwie3twYXJhbXMudXJsLnByZWZpeCArIChpdGVtLnVybCB8fCBpdGVtLmxpbmspICsgcGFyYW1zLnVybC5zdWZmaXh9fVwiIGRhdGEtbmctYXR0ci10aXRsZT1cInt7aXRlbS50aXRsZSB8fCBpdGVtLm5hbWV9fVwiIHRhcmdldD1cInt7cGFyYW1zLm1vZGVsLmxpbmsudGFyZ2V0fX1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImltZy1yZXNwb25zaXZlXCIgZGF0YS1uZy1zcmM9XCJ7e0dSSUZGTy51cGxvYWRQYXRoICsgKGl0ZW0ucGljdHVyZSB8fCBpdGVtLmltYWdlKX19XCIvPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAnJydcblxuICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQgJ2dyaWZmby9oaWdobGlnaHQvdGl0bGUuaHRtbCcsICcnJ1xuICAgICAgICAgICAgPGEgZGF0YS1uZy1ocmVmPVwie3twYXJhbXMudXJsLnByZWZpeCArIGl0ZW0udXJsICsgcGFyYW1zLnVybC5zdWZmaXh9fVwiIGRhdGEtbmctYXR0ci10aXRsZT1cInt7aXRlbS50aXRsZSB8fCBpdGVtLm5hbWV9fVwiIHRhcmdldD1cInt7cGFyYW1zLm1vZGVsLmxpbmsudGFyZ2V0fX1cIj5cbiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJoaWdobGlnaHQtdGl0bGVcIj57e2l0ZW0ubmFtZX19PC9oMj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgJycnXG5cbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0ICdncmlmZm8vaGlnaGxpZ2h0L3Nob3J0ZGVzY3JpcHRpb24uaHRtbCcsICc8cD57e2l0ZW0uc2hvcnRkZXNjcmlwdGlvbn19PC9wPidcblxuICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQgJ2dyaWZmby9oaWdobGlnaHQvbGluay5odG1sJywgJycnXG4gICAgICAgICAgICA8YSBkYXRhLW5nLWhyZWY9XCJ7e3BhcmFtcy51cmwucHJlZml4ICsgaXRlbS51cmwgKyBwYXJhbXMudXJsLnN1ZmZpeH19XCIgZGF0YS1uZy1jbGFzcz1cInBhcmFtcy5tb2RlbC5saW5rLmNsYXNzXCIgZGF0YS1uZy1hdHRyLXRpdGxlPVwie3tpdGVtLnRpdGxlIHx8IGl0ZW0ubmFtZX19XCIgdGFyZ2V0PVwie3twYXJhbXMubW9kZWwubGluay50YXJnZXR9fVwiPlxuICAgICAgICAgICAgICAgIDxpIGRhdGEtbmctY2xhc3M9XCJwYXJhbXMubW9kZWwubGluay5pY29uXCIgZGF0YS1uZy1pZj1cInBhcmFtcy5tb2RlbC5saW5rLmljb25cIj48L2k+XG4gICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1uZy1pZj1cInBhcmFtcy5tb2RlbC5saW5rLmljb25cIj4gPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbmctaWY9XCJwYXJhbXMubW9kZWwubGluay5sYWJlbFwiPnt7cGFyYW1zLm1vZGVsLmxpbmsubGFiZWx9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgJycnXG4iXX0=